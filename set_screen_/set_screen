#!/usr/bin/env python3
#2
from tkinter import Tk, Label
from subprocess import run
import os

class Redshift:
    def __init__(self):
        with open(get_absolute_path('memory'), "r") as memory:
            temperature, brightness = memory.read().split()
            self.temperature = int(temperature)
            self.brightness = int(brightness) 
    def change(self, key):
        if key.keysym in ('b', 'k'):
            self.brightness = self.brightness + 3 
            if self.brightness > 100:
                self.brightness = 100
        elif key.keysym in ('d', 'j'):
            self.brightness = self.brightness - 3 
        elif key.keysym in ('w', 'h'):
            self.temperature = self.temperature - 100
        elif key.keysym in ('c', 'l'):
            self.temperature = self.temperature + 100
        elif key.keysym in ('r', 'r'):
            run(['redshift', '-x'])
            return
        elif key.keysym in ('1', 'o', 'f'):
            self.brightness = 100 
        elif key.keysym == 'Escape':
            remember(self.temperature, self.brightness)
            root.destroy()
            return
        else:
            return
        run(['redshift',
             '-O', str(self.temperature),
             '-b', str(self.brightness /100)])

def get_absolute_path(relative_path):
    this_file_path = os.path.realpath(__file__) 
    this_file_directory = os.path.dirname(this_file_path)
    absolute_path = os.path.join(this_file_directory, relative_path)
    return absolute_path

def remember(temperature, brightness):
    with open(get_absolute_path('memory'), "w") as memory:
        memory.write('{} {}'.format(temperature, brightness))

class Hints:
    def __init__(self):
        self.label = Label(root, text='''bdwc1
jkhlof''')
        self.label.pack()

root = Tk()
rs = Redshift()
root.bind('<Key>', rs.change)
root.title('screen')
root.attributes('-type', 'dialog')
h = Hints()
root.mainloop()
